#!/usr/bin/env python

import argparse
import json
import sys
import yaml
from lxml import etree
from tpen import TPen
from tpen2tei.parse import from_sc


def pull_ms(directory, projectlist):
    for p in projectlist:
        directory.project(project=p)
    first = projectlist.pop(0)
    ms = json.loads(first.get('data'))
    canvases = ms.get('sequences')[0].get('canvases')
    for p in projectlist:
        np = json.loads(p.get('data'))
        canvases.extend(np.get('sequences')[0].get('canvases'))
    return ms


def metadata():
    """Return a dictionary suitable for the 'metadata' parameter to from_sc."""
    return {
        'title': 'Ժամանակագրութիւն',
        'author': 'Մատթէոս Ուռհայեցի',
        'short_error': True
    }


def special_chars():
    """Return a dictionary suitable for the 'special_chars parameter to from_sc."""
    return {
        'աշխարհ': ('asxarh', 'ARMENIAN ASHXARH SYMBOL'),
        'ամենայն': ('amenayn', 'ARMENIAN AMENAYN SYMBOL'),
        'արեգակն': ('aregakn', 'ARMENIAN AREGAKN SYMBOL'),
        'լուսին': ('lusin', 'ARMENIAN LUSIN SYMBOL'),
        'որպէս': ('orpes', 'ARMENIAN ORPES SYMBOL'),
        'երկիր': ('erkir', 'ARMENIAN ERKIR SYMBOL'),
        'երկին': ('erkin', 'ARMENIAN ERKIN SYMBOL'),
        'ընդ': ('und', 'ARMENIAN END SYMBOL'),
        'ըստ': ('ust', 'ARMENIAN EST SYMBOL'),
        'պտ': ('ptlig', 'ARMENIAN PEH-TIWN LIGATURE'),
        'թբ': ('tblig', 'ARMENIAN TO-BEN LIGATURE'),
        'թե': ('techlig', 'ARMENIAN TO-ECH LIGATURE'),
        'թի': ('tinilig', 'ARMENIAN TO-INI LIGATURE'),
        'թէ': ('tehlig', 'ARMENIAN TO-EH LIGATURE'),
        'էս': ('eslig', 'ARMENIAN EH-SEH LIGATURE'),
        'ես': ('echslig', 'ARMENIAN ECH-SEH LIGATURE'),
        'յր': ('yrlig', 'ARMENIAN YI-REH LIGATURE'),
        'րզ': ('rzlig', 'ARMENIAN REH-ZA LIGATURE'),
        'զմ': ('zmlig', 'ARMENIAN ZA-MEN LIGATURE'),
        'թգ': ('tglig', 'ARMENIAN TO-GIM LIGATURE'),
        'ա': ('avar', 'ARMENIAN AYB VARIANT'),
        'հ': ('hvar', 'ARMENIAN HO VARIANT'),
        'յ': ('yabove', 'ARMENIAN YI SUPERSCRIPT VARIANT'),
        'ր': ('rabove', 'ARMENIAN RE SUPERSCRIPT VARIANT')
    }


def armnumber(val):
    # Create the stack of characters
    sigfigs = [ord(c) for c in val.replace('և', '').upper() if 1328 < ord(c) < 1365]
    total = 0
    last = None
    for ch in sigfigs:
        # What is this one's numeric value?
        if ch < 1338:    # Ա-Թ
            chval = ch - 1328
        elif ch < 1347:  # Ժ-Ղ
            chval = (ch - 1337) * 10
        elif ch < 1356:  # Ճ-Ջ
            chval = (ch - 1346) * 100
        else:            # Ռ-Ք
            chval = (ch - 1355) * 1000

        # Put it in the total
        if last is None or chval < last:
            total += chval
        else:
            total *= chval
        last = chval
    return total


def transcription_filter(st):
    return st.replace(
        '_', '֊').replace(    # fix erroneous underscore use by Razmik
        '“', '"').replace(    # fix curly quote pasting by Anahit
        '”', '"').replace(
        ',', '.')             # MSS have no difference between comma & dot


if __name__ == '__main__':
    argp = argparse.ArgumentParser(description="Test the conversion of a particular MS to XML")
    argp.add_argument('identifier')
    argp.add_argument('--config', default='./tpen.yml')
    opts = argp.parse_args()

    # Get the config and initialise T-PEN
    with open(opts.config) as y:
        config = yaml.load(y)
    tpenobj = TPen(cfg=config)

    # Pick out the relevant projects from the list, sort by label, and fetch them
    testinfo = sorted([x for x in tpenobj.projects_list() if x['label'].find(opts.identifier) > -1],
                      key=lambda e: e.get('label'))

    # Merge the JSON into one object and XMLify it
    xml = from_sc(pull_ms(tpenobj, testinfo),
                  metadata=metadata(),
                  special_chars=special_chars(),
                  numeric_parser=armnumber,
                  text_filter=transcription_filter)

    # Return if we were successful
    if xml is not None:
        sys.stdout.buffer.write(etree.tostring(xml, encoding="utf-8", pretty_print=True, xml_declaration=True))

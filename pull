#!/usr/bin/env python

import argparse
import json
import logging
import os
import sys
import yaml
from config import metadata, special_chars, numeric_parser, transcription_filter, postprocess
from lxml import etree
from tpen import TPen
from tpen2tei.parse import from_sc


def pull_ms(directory, projectlist):
    if len(projectlist) == 0:
        return None
    for p in projectlist:
        directory.project(project=p)
    first = projectlist.pop(0)
    ms = json.loads(first.get('data'))
    canvases = ms.get('sequences')[0].get('canvases')
    for p in projectlist:
        np = json.loads(p.get('data'))
        canvases.extend(np.get('sequences')[0].get('canvases'))
    return ms


if __name__ == '__main__':
    argp = argparse.ArgumentParser(description="Test the conversion of a particular MS to XML")
    argp.add_argument('identifier')
    argp.add_argument('--config', default='./tpen.yml')
    argp.add_argument('--members', default='./members.json')
    opts = argp.parse_args()

    # Parse the list of project members
    members = None
    if os.path.isfile(opts.members):
        with open(opts.members, encoding="utf-8") as f:
            members = json.load(f)

    # Get the config and initialise T-PEN
    with open(opts.config) as y:
        config = yaml.load(y, Loader=yaml.Loader)

    logargs = {
        'format': '%(asctime)s %(message)s',
        'level': config.get('loglevel', 'INFO')
    }
    if 'logfile' in config:
        logargs['filename'] = config.get('logfile')
    else:
        logargs['stream'] = sys.stderr

    logging.basicConfig (**logargs)
    tpenobj = TPen(cfg=config)

    # Pick out the relevant projects from the list, sort by label, and fetch them
    testinfo = sorted([x for x in tpenobj.projects_list() if x['label'].find(opts.identifier) > -1],
                      key=lambda e: e.get('label'))

    # Merge the JSON into one object and XMLify it
    jsonspec = pull_ms(tpenobj, testinfo)
    if jsonspec is None:
        print("No projects found with %s in title. Check login credentials in tpen.yml?" % opts.identifier)
        exit()

    xml = from_sc(jsonspec,
                  metadata=metadata,
                  special_chars=special_chars,
                  numeric_parser=numeric_parser,
                  text_filter=transcription_filter,
                  postprocess=postprocess,
                  members=members)

    # Return if we were successful
    if xml is not None:
        sys.stdout.buffer.write(etree.tostring(xml, encoding="utf-8", pretty_print=True, xml_declaration=True))

#!/usr/bin/env python

import argparse
import json
import sys
import yaml
from config import metadata, special_chars, numeric_parser, transcription_filter
from lxml import etree
from tpen import TPen
from tpen2tei.parse import from_sc


def pull_ms(directory, projectlist):
    for p in projectlist:
        directory.project(project=p)
    first = projectlist.pop(0)
    ms = json.loads(first.get('data'))
    canvases = ms.get('sequences')[0].get('canvases')
    for p in projectlist:
        np = json.loads(p.get('data'))
        canvases.extend(np.get('sequences')[0].get('canvases'))
    return ms


if __name__ == '__main__':
    argp = argparse.ArgumentParser(description="Test the conversion of a particular MS to XML")
    argp.add_argument('identifier')
    argp.add_argument('--config', default='./tpen.yml')
    opts = argp.parse_args()

    # Get the config and initialise T-PEN
    with open(opts.config) as y:
        config = yaml.load(y)
    tpenobj = TPen(cfg=config)

    # Pick out the relevant projects from the list, sort by label, and fetch them
    testinfo = sorted([x for x in tpenobj.projects_list() if x['label'].find(opts.identifier) > -1],
                      key=lambda e: e.get('label'))

    # Merge the JSON into one object and XMLify it
    xml = from_sc(pull_ms(tpenobj, testinfo),
                  metadata=metadata,
                  special_chars=special_chars,
                  numeric_parser=numeric_parser,
                  text_filter=transcription_filter)

    # Return if we were successful
    if xml is not None:
        sys.stdout.buffer.write(etree.tostring(xml, encoding="utf-8", pretty_print=True, xml_declaration=True))
